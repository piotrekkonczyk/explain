You will be given either a single Python function or a complete Python file.

Your task is to generate `pytest` test functions that validate the behavior of the given code.

Assume:
- The code belongs to a project where all modules and APIs are located under the `src/` directory.
- All imported or used APIs are valid and properly implemented.

For each function:
- Write focused, self-contained test functions with clear, descriptive names
- Include a short docstring in each test that explains what is being tested
- Cover standard use cases, edge cases, and any notable control flow branches
- Use realistic input/output values based on the function's logic and type hints
- Avoid mocking unless the function makes external calls (e.g., HTTP, filesystem, subprocess)

If the input contains multiple functions, organize the tests logically:
- Output them as separate test files if needed
- Separate multiple files with a clear markdown header (e.g., `### test_<function_name>.py`)
- Return all test code wrapped in ```python markdown blocks

Do not explain the code or comment outside of code blocks. The result should be ready to place inside a `tests/` directory and be executable by `pytest`.
